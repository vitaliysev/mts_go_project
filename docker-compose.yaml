version: '3'
networks:
  project_network:
    driver: bridge
volumes:
  prometheus_data:
  postgres_volume1:
  postgres_volume2:
  postgres_volume3:
  redpanda-0: null

services:
  jaeger:
    image: jaegertracing/all-in-one:1.48
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp" # jaeger-client
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # web
      - "14268:14268"
      - "9411:9411"
  prometheus:
    image: prom/prometheus:v2.37.9
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
#  redpanda-0:
#    command:
#      - redpanda
#      - start
#      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
#      # Address the broker advertises to clients that connect to the Kafka API.
#      # Use the internal addresses to connect to the Redpanda brokers'
#      # from inside the same Docker network.
#      # Use the external addresses to connect to the Redpanda brokers'
#      # from outside the Docker network.docker
#      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
#      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
#      # Address the broker advertises to clients that connect to the HTTP Proxy.
#      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
#      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
#      # Redpanda brokers use the RPC API to communicate with each other internally.
#      - --rpc-addr redpanda-0:33145
#      - --advertise-rpc-addr redpanda-0:33145
#      # Mode dev-container uses well-known configuration properties for development in containers.
#      - --mode dev-container
#      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
#      - --smp 1
#      - --default-log-level=info
#    image: docker.redpanda.com/redpandadata/redpanda:v24.2.8
#    container_name: redpanda-0
#    volumes:
#      - redpanda-0:/var/lib/redpanda/data
#    networks:
#      - project_network
#    ports:
#      - 18081:18081
#      - 18082:18082
#      - 19092:19092
#      - 19644:9644
#
#  redpanda-console:
#    container_name: redpanda-console
#    image: docker.redpanda.com/redpandadata/console:v2.7.2
#    networks:
#      - project_network
#    entrypoint: /bin/sh
#    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
#    environment:
#      CONFIG_FILEPATH: /tmp/config.yml
#      CONSOLE_CONFIG_FILE: |
#        kafka:
#          brokers: ["redpanda-0:9092"]
#          schemaRegistry:
#            enabled: true
#            urls: ["http://redpanda-0:8081"]
#        redpanda:
#          adminApi:
#            enabled: true
#            urls: ["http://redpanda-0:9644"]
#    ports:
#      - 8080:8080
#    depends_on:
#      - redpanda-0
  pg:
    image: postgres:14-alpine3.17
    container_name: hotel_db
    environment:
      POSTGRES_DB: hotel
      POSTGRES_USER: hotel-user
      POSTGRES_PASSWORD: hotel-password
    ports:
      - "54321:5432"
    volumes:
      - postgres_volume1:/var/lib/postgresql/data


  pg-local:
    image: postgres:14-alpine3.17
    container_name: booking_db
    environment:
      POSTGRES_DB: booking
      POSTGRES_USER: booking-user
      POSTGRES_PASSWORD: booking-password
    ports:
      - "54322:5432"
    volumes:
      - postgres_volume2:/var/lib/postgresql/data

  pg-auth:
    image: postgres:14-alpine3.17
    container_name: auth_db
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: auth-user
      POSTGRES_PASSWORD: auth-password
    ports:
      - "54323:5432"
    volumes:
      - postgres_volume3:/var/lib/postgresql/data
  migrator1:
    build:
      context: .
      dockerfile: ./migration_hotel.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: pg

  migrator2:
    build:
      context: .
      dockerfile: ./migration_booking.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: pg-local

  migrator3:
    build:
      context: .
      dockerfile: ./migration_auth.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: pg-auth
